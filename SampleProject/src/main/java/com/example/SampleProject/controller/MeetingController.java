package com.example.SampleProject.controller;



import com.example.SampleProject.email.EmailInviteImpl;
import com.example.SampleProject.email.Invite;
import com.example.SampleProject.email.Participant;
import com.example.SampleProject.email.ParticipantType;
import com.example.SampleProject.entity.Meeting;
import com.example.SampleProject.entity.MeetingAttendees;
import com.example.SampleProject.repository.MeetingAttendeesRepository;
import com.example.SampleProject.repository.MeetingRepository;


import org.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;
import java.util.*;



@RestController
@CrossOrigin("*")
public class  MeetingController {


    private final MeetingRepository meetingRepository;
    @Autowired
    private MeetingAttendeesRepository meetingAttendeesRepository;


    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data


    public MeetingController(MeetingRepository meetingRepository) {
        this.meetingRepository = meetingRepository;
    }

    @PostMapping("/add") // Map ONLY POST Requests
    public @ResponseBody ResponseEntity<Meeting> addNewUser (@RequestBody Meeting meetingData) throws JSONException {
        Token tokenObj = new Token();
        String roomId = meetingData.getRoom_id();
        String token = String.valueOf(Token.generateToken(roomId));

        meetingData.setToken_id(token);
        meetingData.setRoom_id(roomId);

        System.out.println(token);
        List<String> meetingAttendees = meetingData.getMeeting_attendees();
        Meeting addNewMeeting = meetingRepository.save(meetingData);

        Integer meeting_id = addNewMeeting.getId();
        saveMeetingAttendees(meeting_id, meetingAttendees, meetingData);

        URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{uri}")
                .buildAndExpand(addNewMeeting.getId()).toUri();

        return ResponseEntity.created(uri).build();
    }

    public void saveMeetingAttendees(Integer meeting_id, List<String> meetingAttendees, Meeting meetingData){
        Object[] meetingAttendeesArr = meetingAttendees.toArray();

        for (int i = 0; i<meetingAttendeesArr.length;i++){
            String email = String.valueOf(meetingAttendeesArr[i]);
            int join_status = 0;
            System.out.println(email);
            //Object attendee = createJsonObject(email, join_status, meeting_id);
            MeetingAttendees m = new MeetingAttendees();
            m.setMeeting_id(meeting_id);
            m.setEmail(email);
            m.setJoin_status(join_status);
             meetingAttendeesRepository.save(m);
            sendEmail(email, meetingData.getTitle(), meetingData.getDescription(), meetingData.getStart_time(), meetingData.getEnd_time(), meetingData.getMeeting_date());
        }
    }

    private Object createJsonObject(String email, int join_status, int meeting_id) {
        // You can customize the key-value pairs as needed
        return Map.of(
                "email", email,
                "join_status", join_status,
                "meeting_id", meeting_id
        );
    }

    private void sendEmail (String email, String title, String description, String start_time, String end_time, String meeting_date)
    {
        String password = "fdck obqt golb pvyd";

        // set the properties to send email
        Properties props = new Properties();
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.socketFactory.port", "465");
        props.put("mail.smtp.socketFactory.class",
                "javax.net.ssl.SSLSocketFactory");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.port", "465");

        props.put("username", "harshitdubey456@gmail.com");
        props.put("password", password);

        // set the organizer of the event

        Participant from = new Participant("From", "harshitdubey456@gmail.com",
                ParticipantType.REQUIRED);

        // set the attendees of the event
        Participant attendee1 = new Participant("Harshit",
                email, ParticipantType.REQUIRED);
        List<Participant> list = new ArrayList<Participant>();
        list.add(attendee1);
        Invite invite = new EmailInviteImpl(props);
        Date startDate = new Date(System.currentTimeMillis() + 600000);
        Date endDate = new Date(startDate.getTime() + 1800000);
        try {
            invite.sendInvite(title, description, from, list,
                    startDate, endDate, "bhopal");
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

    }


    @PostMapping("/get-meeting-id") // Map ONLY POST Requests
    public @ResponseBody Object getMeetingId (@RequestBody Meeting meetingData) throws JSONException {

        String room_id = meetingData.getRoom_id();
        System.out.println(room_id);

        Optional<Meeting> meeting = meetingRepository.findByRoomId(room_id);
        if(meeting.isEmpty()) {
            return ResponseEntity.noContent();
        }else{
            return ResponseEntity.ok(meeting).getBody();
        }
    }

    @PostMapping("/check-meet-email") // Map ONLY POST Requests
    public @ResponseBody Object checkMeetEmail (@RequestBody MeetingAttendees meetingAttendeesData) throws JSONException {

        String email = meetingAttendeesData.getEmail();
        long meeting_id = meetingAttendeesData.getMeeting_id();


        Optional<MeetingAttendees> res = meetingAttendeesRepository.findByEmailAndMeetingId(email,meeting_id);

        if(res.isEmpty()) {
            return ResponseEntity.noContent();
        }else{
            return ResponseEntity.ok(res).getBody();
        }
    }

    @PostMapping("/get-meet-by-email") // Map ONLY POST Requests
    public @ResponseBody Object getMeetByEmail (@RequestBody MeetingAttendees meetingAttendeesData) throws JSONException {

        String email = meetingAttendeesData.getEmail();
        List<Optional<Meeting>> meetings =new ArrayList<>();

        int i =0;
        List<MeetingAttendees> meetingAttendeesRes = meetingAttendeesRepository.findByEmailOrderByIdDesc(email);
        for (MeetingAttendees meetingAttendees : meetingAttendeesRes) {
            Integer meeting_id = (int) meetingAttendees.getMeeting_id();
            meetings.add(meetingRepository.findById(meeting_id));
            i++;
        }
        if(meetings.isEmpty()) {
            return ResponseEntity.noContent();
        }else{
            return ResponseEntity.ok(meetings).getBody();
        }
    }

    @PostMapping("/get-meet-details") // Map ONLY POST Requests
    public @ResponseBody Object getMeetDetails (@RequestBody Meeting meetingData) throws JSONException {
        Integer meeting_id = meetingData.getId();
        Optional<Meeting> meetingRes = meetingRepository.findById(meeting_id);
        return ResponseEntity.ok(meetingRes).getBody();
    }

    @PostMapping("/update-meeting")
    public @ResponseBody ResponseEntity<Meeting> updateMeeting (@RequestBody Meeting meetingData) throws JSONException {
        Integer meetingId = meetingData.getId();
        Meeting meetingDataUp = meetingRepository.findById(meetingId).
                orElseThrow(()-> new IllegalArgumentException("meeting id not available !!"));
        meetingDataUp.setTitle(meetingData.getTitle());
        meetingDataUp.setDescription(meetingData.getDescription());
        meetingDataUp.setMeeting_date(meetingData.getMeeting_date());
        meetingDataUp.setStart_time(meetingData.getStart_time());
        meetingDataUp.setEnd_time(meetingData.getEnd_time());
        Meeting meetingRes = meetingRepository.save(meetingDataUp);
        URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{uri}")
                .buildAndExpand(meetingRes.getId()).toUri();

        return ResponseEntity.created(uri).build();
    }

    @PostMapping("/get-meet-attendees")
    public @ResponseBody Object getMeetAttendees (@RequestBody Meeting meetingData) throws JSONException {
        Integer meeting_id = meetingData.getId();
        List<Optional<MeetingAttendees>> meetings =new ArrayList<>();
        List<MeetingAttendees> meetingAttendeesRes = meetingAttendeesRepository.findByMeetingId(meeting_id);
        return ResponseEntity.ok(meetingAttendeesRes).getBody();
    }

    @PostMapping("/remove-attendees")
    public @ResponseBody Object removeAttendees (@RequestBody MeetingAttendees meetingAttendeesData) throws JSONException {
        Integer id = meetingAttendeesData.getId();

        meetingAttendeesRepository.deleteById(id);

        List<String> response = new ArrayList<>();

        response.add("Deleted successfully");

        return ResponseEntity.ok(response).getBody();
    }

    @PostMapping("/add-attendees")
    public @ResponseBody Object addAttendees (@RequestBody MeetingAttendees meetingAttendeesData) throws JSONException {
        String email = meetingAttendeesData.getEmail();
        Integer meeting_id = meetingAttendeesData.getMeeting_id();

        Meeting meetingDataUp = meetingRepository.findById(meeting_id).
                orElseThrow(()-> new IllegalArgumentException("meeting id not available !!"));

        meetingAttendeesRepository.save(meetingAttendeesData);

        List<String> response = new ArrayList<>();

        response.add("Added successfully");

        sendEmail(email, meetingDataUp.getTitle(), meetingDataUp.getDescription(), meetingDataUp.getStart_time(), meetingDataUp.getEnd_time(), meetingDataUp.getMeeting_date());

        return ResponseEntity.ok(response).getBody();
    }
}
